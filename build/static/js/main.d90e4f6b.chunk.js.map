{"version":3,"sources":["listNames.js","game.js","App.js","reportWebVitals.js","index.js"],"names":["listNames","props","Names","namesArr","map","name","index","class","icon","faTimes","className","onClick","removeUser","Game","state","gameStart","run","this","NamesArr","length","disabled","type","max","window","respondent","randomNumber","asker","prevRespondent","prevAsker","randomIndex","setState","faPlay","React","Component","GameEvaluate","nextProps","nextState","Math","floor","random","SameAlert","show","user","App","users","showAlert","appendName","bind","changeHandler","change","toUpperCase","concat","event","target","value","Newarr","splice","onSubmit","e","preventDefault","onChange","placeholder","faPlus","userIn","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d90e4f6b.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faTimes}  from '@fortawesome/free-solid-svg-icons';\n// <i class=\"fas fa-window-close\"></i>\n\n\nfunction listNames(props){\n    var Names = props.namesArr.map((name, index) => {\n        // console.log(index);\n        return(\n            <div class=\"users-name\" key = {index}>\n                {name} <FontAwesomeIcon icon={faTimes} className=\"close-icon\" onClick={() => {props.removeUser(index);}}/>\n            </div>\n        );\n    });\n    return(\n      <div className=\"names-container\">\n        {Names}\n      </div>\n    );\n}\nexport default listNames;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faPlay}  from '@fortawesome/free-solid-svg-icons';\nclass Game extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            gameStart:false,\n            run:0\n        }\n    }\n    render(){\n        // console.log(this.props.NamesArr);\n        // debugger;\n        if(this.props.NamesArr.length<3){\n            return(\n                <button className=\"play-button\" disabled>Enter At least 3 Players.</button>\n            );\n        }\n        else{\n          // debugger;\n            return(\n                <div>\n                    <GameEvaluate NamesArr={this.props.NamesArr} run={this.state.run}/>\n                    <button\n                      className=\"play-button\"\n                      type=\"button\"\n                      onClick={() => {randomIndex(this.props.NamesArr.length);this.setState({run: this.state.run+1});}}\n                      >\n                      Start\n                      <FontAwesomeIcon icon={faPlay} className=\"play-icon\"/>\n                    </button>\n                </div>\n            );\n        }\n    }\n}\n\nclass GameEvaluate extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n    }\n  }\n  shouldComponentUpdate(nextProps, nextState){\n\n    if(nextProps.run===0){\n      // console.log(false);\n      return(false);\n    }\n    else if(nextProps.run!==this.props.run){\n      // console.log(nextProps.run);\n      return(true);\n    }\n    else{\n      return(false);\n    }\n  }\n  render(){\n    if(this.props.run>0){\n      // debugger;\n      return(\n        <div className=\"OP\">\n          <span class=\"name\">{this.props.NamesArr[window.asker]}</span> asks/gives dare to <span className=\"name\">{this.props.NamesArr[window.respondent]}</span>.\n        </div>\n      );\n    }\n    else{\n      return(<div></div>)\n    }\n  }\n\n}\nfunction randomNumber(max){\n  return Math.floor(Math.random() * Math.floor(max));\n}\nfunction randomIndex(max) {\n    // debugger;\n    window.respondent=randomNumber(max);\n    window.asker=randomNumber(max);\n    while((window.respondent===window.asker) || (window.prevRespondent===window.respondent) || (window.prevAsker===window.asker)){\n        window.respondent=randomNumber(max);\n        window.asker=randomNumber(max);\n    }\n    window.prevAsker=window.asker;\n    window.prevRespondent=window.respondent;\n}\nexport default Game;\n","import React from \"react\";\nimport './App.css';\nimport ListNames from './listNames';\nimport Game from './game';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faPlus}  from '@fortawesome/free-solid-svg-icons';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      users: [],\n      user: \"\",\n      showAlert: false\n    }\n    this.appendName = this.appendName.bind(this);\n    this.changeHandler = this.changeHandler.bind(this);\n    this.removeUser = this.removeUser.bind(this);\n  }\n  appendName(){\n    var change=true;\n    var Users = this.state.users;\n    Users.map((user) => {\n      if(user.toUpperCase()===this.state.user.toUpperCase()){\n        change=false;\n        this.setState({showAlert: true});\n      }\n      return (\" \");\n    });\n    if(change && (this.state.user!==\"\")){\n      this.setState({users: this.state.users.concat(this.state.user)});\n      this.setState({user:\"\"});\n    }\n    // console.log(this.state.users);\n  }\n  changeHandler(event){\n    this.setState({showAlert: false});\n    this.setState({user:event.target.value});\n  }\n  removeUser(index){\n    var Newarr = this.state.users;\n    Newarr.splice(index,1);\n    this.setState({users: Newarr});\n  }\n  render(){\n    return(\n      <>\n        <nav>\n          <h1>\n            Truth or Dare\n          </h1>\n        </nav>\n        <form onSubmit={(e) => {this.appendName();e.preventDefault();}}>\n          <div className=\"input-container\">\n            <input value={this.state.user || \"\"} type=\"name\" onChange={this.changeHandler} placeholder=\"Enter a player name.\"/>\n            <div className=\"input-bar\"/>\n          </div>\n          <FontAwesomeIcon icon={faPlus} className=\"add-icon\" onClick={(e) => {this.appendName();e.preventDefault();}}/>\n        </form>\n        <SameAlert className=\"samealert\" show={this.state.showAlert} user={this.state.users[0]}/>\n        <ListNames namesArr={this.state.users} removeUser={(userIn) => {this.removeUser(userIn);}}/>\n        <br/>\n        <br/>\n        <Game NamesArr={this.state.users}/>\n      </>\n    );\n\n  }\n}\n\nfunction SameAlert(props){\n  // var CostomAlert;\n  if(props.show){\n    return(\n      <div className=\"samealert\">\n        {props.user} <b>is already Entered.</b>\n      </div>\n    );\n  }\n  else{\n    return(\n      <div/>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}